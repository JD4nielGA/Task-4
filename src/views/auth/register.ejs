<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
        }
        .register-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        .btn-primary {
            background-color: #667eea;
            border-color: #667eea;
        }
        .btn-primary:hover {
            background-color: #5a6fd8;
            border-color: #5a6fd8;
        }
        .password-strength {
            height: 5px;
            border-radius: 3px;
            transition: all 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card register-card">
                    <div class="card-body p-5">
                        <div class="text-center mb-4">
                            <h2 class="fw-bold text-primary">TutorNest</h2>
                            <p class="text-muted">Registrar Nuevo Usuario</p>
                            <small class="badge bg-warning text-dark">
                                <i class="fas fa-shield-alt me-1"></i>Solo Administradores
                            </small>
                        </div>

                        <% if (message) { %>
                            <div class="alert alert-<%= success ? 'success' : 'danger' %> alert-dismissible fade show" role="alert">
                                <%= message %>
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        <% } %>

                        <form action="/auth/register" method="POST" id="registerForm">
                            <div class="mb-3">
                                <label for="username" class="form-label">
                                    <i class="fas fa-user me-2"></i>Usuario
                                </label>
                                <input type="text" class="form-control" id="username" name="username" required 
                                       pattern="[a-zA-Z0-9_]{3,20}" title="3-20 caracteres, solo letras, números y guiones bajos">
                                <div class="form-text">3-20 caracteres, solo letras, números y guiones bajos</div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="password" class="form-label">
                                    <i class="fas fa-lock me-2"></i>Contraseña
                                </label>
                                <input type="password" class="form-control" id="password" name="password" required 
                                       minlength="6" onkeyup="checkPasswordStrength()">
                                <div class="password-strength bg-light mt-1" id="passwordStrength"></div>
                                <div class="form-text">Mínimo 6 caracteres, debe incluir mayúscula, minúscula y número</div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">
                                    <i class="fas fa-lock me-2"></i>Confirmar Contraseña
                                </label>
                                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required 
                                       onkeyup="checkPasswordMatch()">
                                <div id="passwordMatch" class="form-text"></div>
                            </div>
                            
                            <div class="mb-4">
                                <div class="alert alert-info" role="alert">
                                    <i class="fas fa-crown me-2"></i>
                                    <strong>Nota:</strong> Todos los usuarios creados serán administradores por defecto.
                                </div>
                            </div>
                            
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg" id="submitBtn" disabled>
                                    <i class="fas fa-user-plus me-2"></i>Registrar Usuario
                                </button>
                            </div>
                        </form>

                        <div class="text-center mt-4">
                            <a href="/protected/dashboard" class="text-decoration-none">
                                <i class="fas fa-arrow-left me-2"></i>Volver al panel
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function checkPasswordStrength() {
            const password = document.getElementById('password').value;
            const strengthBar = document.getElementById('passwordStrength');
            let strength = 0;
            
            if (password.length >= 6) strength++;
            if (password.match(/[a-z]/)) strength++;
            if (password.match(/[A-Z]/)) strength++;
            if (password.match(/[0-9]/)) strength++;
            if (password.match(/[^a-zA-Z0-9]/)) strength++;
            
            const colors = ['bg-danger', 'bg-warning', 'bg-info', 'bg-success', 'bg-success'];
            const widths = ['20%', '40%', '60%', '80%', '100%'];
            const labels = ['Muy débil', 'Débil', 'Regular', 'Fuerte', 'Muy fuerte'];
            
            strengthBar.className = `password-strength ${colors[strength - 1] || 'bg-light'}`;
            strengthBar.style.width = widths[strength - 1] || '0%';
            strengthBar.title = labels[strength - 1] || 'Sin contraseña';
            
            checkFormValidity();
        }
        
        function checkPasswordMatch() {
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const matchDiv = document.getElementById('passwordMatch');
            
            if (confirmPassword === '') {
                matchDiv.textContent = '';
                matchDiv.className = 'form-text';
            } else if (password === confirmPassword) {
                matchDiv.textContent = '✓ Las contraseñas coinciden';
                matchDiv.className = 'form-text text-success';
            } else {
                matchDiv.textContent = '✗ Las contraseñas no coinciden';
                matchDiv.className = 'form-text text-danger';
            }
            
            checkFormValidity();
        }
        
        // Variables para validación en tiempo real
        let usernameAvailable = true;
        let usernameCheckTimeout;
        
        // Función para verificar disponibilidad del nombre de usuario
        async function checkUsernameAvailability(username) {
            if (username.length < 3) return true;
            
            try {
                const response = await fetch('/auth/api/check-username', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    return data.available;
                }
            } catch (error) {
                console.log('Error checking username:', error);
            }
            return true; // Si hay error, asumir disponible
        }
        
        // Función para manejar cambios en el campo de usuario
        async function handleUsernameChange() {
            const username = usernameField.value.trim();
            
            // Limpiar timeout anterior
            if (usernameCheckTimeout) {
                clearTimeout(usernameCheckTimeout);
            }
            
            // Establecer nuevo timeout para verificación
            usernameCheckTimeout = setTimeout(async () => {
                if (username.length >= 3) {
                    usernameAvailable = await checkUsernameAvailability(username);
                    
                    // Mostrar feedback visual
                    if (!usernameAvailable) {
                        usernameField.style.borderColor = '#dc3545';
                        
                        // Crear o actualizar mensaje de error
                        let errorMsg = document.getElementById('username-error');
                        if (!errorMsg) {
                            errorMsg = document.createElement('div');
                            errorMsg.id = 'username-error';
                            errorMsg.style.color = '#dc3545';
                            errorMsg.style.fontSize = '0.875rem';
                            errorMsg.style.marginTop = '0.25rem';
                            usernameField.parentNode.appendChild(errorMsg);
                        }
                        errorMsg.textContent = 'Este nombre de usuario ya está en uso';
                    } else {
                        // Remover mensaje de error si existe
                        const errorMsg = document.getElementById('username-error');
                        if (errorMsg) {
                            errorMsg.remove();
                        }
                    }
                }
                checkFormValidity();
            }, 500); // Esperar 500ms después de que el usuario deje de escribir
            
            checkFormValidity();
        }
        
        function checkFormValidity() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const submitBtn = document.getElementById('submitBtn');
            
            // Validar formato de usuario (3-20 caracteres, solo letras, números y guiones bajos)
            const usernameValid = /^[a-zA-Z0-9_]{3,20}$/.test(username);
            
            // Validar fortaleza de contraseña (mínimo 6 caracteres, al menos una minúscula, una mayúscula y un número)
            const passwordValid = password.length >= 6 && 
                                /(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(password);
            
            // Validar que las contraseñas coincidan
            const passwordsMatch = password === confirmPassword && confirmPassword !== '';
            
            const isValid = usernameValid && passwordValid && passwordsMatch && usernameAvailable;
            
            // Forzar habilitación del botón si todos los campos son válidos
            submitBtn.disabled = !isValid;
            submitBtn.style.pointerEvents = isValid ? 'auto' : 'none';
            submitBtn.style.opacity = isValid ? '1' : '0.6';
            
            // Mostrar feedback visual
            const usernameInput = document.getElementById('username');
            const passwordInput = document.getElementById('password');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            
            if (username.length > 0) {
                usernameInput.classList.toggle('is-valid', usernameValid);
                usernameInput.classList.toggle('is-invalid', !usernameValid);
            } else {
                usernameInput.classList.remove('is-valid', 'is-invalid');
            }
            
            if (password.length > 0) {
                passwordInput.classList.toggle('is-valid', passwordValid);
                passwordInput.classList.toggle('is-invalid', !passwordValid);
            } else {
                passwordInput.classList.remove('is-valid', 'is-invalid');
            }
            
            if (confirmPassword.length > 0) {
                confirmPasswordInput.classList.toggle('is-valid', passwordsMatch);
                confirmPasswordInput.classList.toggle('is-invalid', !passwordsMatch);
            } else {
                confirmPasswordInput.classList.remove('is-valid', 'is-invalid');
            }
            
            // Debug info para ayudar al usuario
            console.log('Validación del formulario:', {
                username: username,
                usernameValid: usernameValid,
                passwordValid: passwordValid,
                passwordsMatch: passwordsMatch,
                isValid: isValid,
                buttonDisabled: submitBtn.disabled
            });
        }
        
        function handleUsernameChange() {
            const username = document.getElementById('username').value;
            
            // Limpiar timeout anterior
            if (usernameCheckTimeout) {
                clearTimeout(usernameCheckTimeout);
            }
            
            // Verificar disponibilidad después de 500ms de inactividad
            usernameCheckTimeout = setTimeout(async () => {
                if (username.length >= 3) {
                    usernameAvailable = await checkUsernameAvailability(username);
                    
                    // Mostrar mensaje si el usuario no está disponible
                    const usernameInput = document.getElementById('username');
                    const existingFeedback = usernameInput.parentNode.querySelector('.username-feedback');
                    
                    if (existingFeedback) {
                        existingFeedback.remove();
                    }
                    
                    if (!usernameAvailable) {
                        const feedback = document.createElement('div');
                        feedback.className = 'form-text text-danger username-feedback';
                        feedback.textContent = '✗ Este nombre de usuario ya existe';
                        usernameInput.parentNode.appendChild(feedback);
                    }
                    
                    checkFormValidity();
                }
            }, 500);
            
            checkFormValidity();
        }
        
        // Agregar múltiples eventos para asegurar que la validación funcione
        const usernameField = document.getElementById('username');
        const passwordField = document.getElementById('password');
        const confirmPasswordField = document.getElementById('confirmPassword');
        
        // Eventos para username
         usernameField.addEventListener('input', handleUsernameChange);
         usernameField.addEventListener('keyup', handleUsernameChange);
         usernameField.addEventListener('paste', () => setTimeout(handleUsernameChange, 10));
        
        // Eventos para password
        passwordField.addEventListener('input', checkPasswordStrength);
        passwordField.addEventListener('keyup', checkPasswordStrength);
        passwordField.addEventListener('paste', () => setTimeout(checkPasswordStrength, 10));
        
        // Eventos para confirmPassword
        confirmPasswordField.addEventListener('input', checkPasswordMatch);
        confirmPasswordField.addEventListener('keyup', checkPasswordMatch);
        confirmPasswordField.addEventListener('paste', () => setTimeout(checkPasswordMatch, 10));
        
        // Validación inicial
        checkFormValidity();
    </script>
</body>
</html>